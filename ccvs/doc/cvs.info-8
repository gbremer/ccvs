This is cvs.info, produced by makeinfo version 4.5 from cvs.texinfo.

INFO-DIR-SECTION GNU Packages
START-INFO-DIR-ENTRY
* CVS: (cvs).                   Concurrent Versions System
END-INFO-DIR-ENTRY
INFO-DIR-SECTION Individual utilities
START-INFO-DIR-ENTRY
* cvs: (cvs)CVS commands.       Concurrent Versions System
END-INFO-DIR-ENTRY


File: cvs.info,  Node: log options,  Next: log examples,  Up: log

log options
-----------

   By default, `log' prints all information that is available.  All
other options restrict the output.  Note that the revision selection
options (`-d', `-r', `-s', and `-w') have no effect, other than
possibly causing a search for files in Attic directories, when used in
conjunction with the options that restrict the output to only `log'
header fields (`-b', `-h', `-R', and `-t') unless the `-S' option is
also specified.

`-b'
     Print information about the revisions on the default branch,
     normally the highest branch on the trunk.

`-d DATES'
     Print information about revisions with a checkin date/time in the
     range given by the semicolon-separated list of dates.  The date
     formats accepted are those accepted by the `-D' option to many
     other CVS commands (*note Common options::).  Dates can be
     combined into ranges as follows:

    `D1<D2'
    `D2>D1'
          Select the revisions that were deposited between D1 and D2.

    `<D'
    `D>'
          Select all revisions dated D or earlier.

    `D<'
    `>D'
          Select all revisions dated D or later.

    `D'
          Select the single, latest revision dated D or earlier.

     The `>' or `<' characters may be followed by `=' to indicate an
     inclusive range rather than an exclusive one.

     Note that the separator is a semicolon (;).

`-h'
     Print only the name of the RCS file, name of the file in the
     working directory, head, default branch, access list, locks,
     symbolic names, and suffix.

`-l'
     Local; run only in current working directory.  (Default is to run
     recursively).

`-N'
     Do not print the list of tags for this file.  This option can be
     very useful when your site uses a lot of tags, so rather than
     "more"'ing over 3 pages of tag information, the log information is
     presented without tags at all.

`-R'
     Print only the name of the RCS file.

`-rREVISIONS'
     Print information about revisions given in the comma-separated
     list REVISIONS of revisions and ranges.  The following table
     explains the available range formats:

    `REV1:REV2'
          Revisions REV1 to REV2 (which must be on the same branch).

    `REV1::REV2'
          The same, but excluding REV1.

    `:REV'
    `::REV'
          Revisions from the beginning of the branch up to and
          including REV.

    `REV:'
          Revisions starting with REV to the end of the branch
          containing REV.

    `REV::'
          Revisions starting just after REV to the end of the branch
          containing REV.

    `BRANCH'
          An argument that is a branch means all revisions on that
          branch.

    `BRANCH1:BRANCH2'
    `BRANCH1::BRANCH2'
          A range of branches means all revisions on the branches in
          that range.

    `BRANCH.'
          The latest revision in BRANCH.

     A bare `-r' with no revisions means the latest revision on the
     default branch, normally the trunk.  There can be no space between
     the `-r' option and its argument.

`-S'
     Suppress the header if no revisions are selected.

`-s STATES'
     Print information about revisions whose state attributes match one
     of the states given in the comma-separated list STATES.

`-t'
     Print the same as `-h', plus the descriptive text.

`-wLOGINS'
     Print information about revisions checked in by users with login
     names appearing in the comma-separated list LOGINS.  If LOGINS is
     omitted, the user's login is assumed.  There can be no space
     between the `-w' option and its argument.

   `log' prints the intersection of the revisions selected with the
options `-d', `-s', and `-w', intersected with the union of the
revisions selected by `-b' and `-r'.


File: cvs.info,  Node: log examples,  Prev: log options,  Up: log

log examples
------------

   Since `log' shows dates in local time, you might want to see them in
Coordinated Universal Time (UTC) or some other timezone.  To do this
you can set your `$TZ' environment variable before invoking CVS:

     $ TZ=UTC cvs log foo.c
     $ TZ=EST cvs log bar.c

   (If you are using a `csh'-style shell, like `tcsh', you would need
to prefix the examples above with `env'.)


File: cvs.info,  Node: ls & rls,  Next: rdiff,  Prev: log,  Up: CVS commands

ls & rls
========

   * ls [-e | -l] [-RP] [-r tag[:date]] [-D date] [path...]

   * Requires: repository for `rls', repository & working directory for
     `ls'.

   * Changes: nothing.

   * Synonym: `dir' & `list' are synonyms for `ls' and `rdir' & `rlist'
     are synonyms for `rls'.

   The `ls' and `rls' commands are used to list files and directories
in the repository.

   By default `ls' lists the files and directories that belong in your
working directory, what would be there after an `update'.

   By default `rls' lists the files and directories on the tip of the
trunk in the topmost directory of the repository.

   Both commands accept an optional list of file and directory names,
relative to the working directory for `ls' and the topmost directory of
the repository for `rls'.  Neither is recursive by default.

* Menu:

* ls & rls options::         ls & rls options
* rls examples:              rls examples


File: cvs.info,  Node: ls & rls options,  Next: rls examples,  Up: ls & rls

ls & rls options
----------------

   These standard options are supported by `ls' & `rls':

`-d'
     Show dead revisions (with tag when specified).

`-e'
     Display in CVS/Entries format.  This format is meant to remain
     easily parsable by automation.

`-l'
     Display all details.

`-P'
     Don't list contents of empty directories when recursing.

`-R'
     List recursively.

`-r TAG[:DATE]'
     Show files specified by TAG or, when DATE is specified and TAG is
     a branch tag, the version from the branch TAG as it existed on
     DATE.  See *Note Common options::.

`-D DATE'
     Show files from date.


File: cvs.info,  Node: rls examples,  Prev: ls & rls options,  Up: ls & rls

rls examples
------------

     $ cvs rls
     cvs rls: Listing module: `.'
     CVSROOT
     first-dir

     $ cvs rls CVSROOT
     cvs rls: Listing module: `CVSROOT'
     checkoutlist
     commitinfo
     config
     cvswrappers
     loginfo
     modules
     notify
     rcsinfo
     taginfo
     verifymsg


File: cvs.info,  Node: rdiff,  Next: release,  Prev: ls & rls,  Up: CVS commands

rdiff--'patch' format diffs between releases
============================================

   * rdiff [-flags] [-V vn] (-r tag1[:date1] | -D date1) [-r
     tag2[:date2] | -D date2] modules...

   * Requires: repository.

   * Changes: nothing.

   * Synonym: patch

   Builds a Larry Wall format patch(1) file between two releases, that
can be fed directly into the `patch' program to bring an old release
up-to-date with the new release.  (This is one of the few CVS commands
that operates directly from the repository, and doesn't require a prior
checkout.) The diff output is sent to the standard output device.

   You can specify (using the standard `-r' and `-D' options) any
combination of one or two revisions or dates.  If only one revision or
date is specified, the patch file reflects differences between that
revision or date and the current head revisions in the RCS file.

   Note that if the software release affected is contained in more than
one directory, then it may be necessary to specify the `-p' option to
the `patch' command when patching the old sources, so that `patch' is
able to find the files that are located in other directories.

* Menu:

* rdiff options::               rdiff options
* rdiff examples::              rdiff examples


File: cvs.info,  Node: rdiff options,  Next: rdiff examples,  Up: rdiff

rdiff options
-------------

   These standard options are supported by `rdiff' (*note Common
options::, for a complete description of them):

`-D DATE'
     Use the most recent revision no later than DATE.

`-f'
     If no matching revision is found, retrieve the most recent
     revision (instead of ignoring the file).

`-l'
     Local; don't descend subdirectories.

`-R'
     Examine directories recursively.  This option is on by default.

`-r TAG'
     Use the revision specified by TAG, or when DATE is specified and
     TAG is a branch tag, the version from the branch TAG as it existed
     on DATE.  See *Note Common options::.

   In addition to the above, these options are available:

`-c'
     Use the context diff format.  This is the default format.

`-s'
     Create a summary change report instead of a patch.  The summary
     includes information about files that were changed or added
     between the releases.  It is sent to the standard output device.
     This is useful for finding out, for example, which files have
     changed between two dates or revisions.

`-t'
     A diff of the top two revisions is sent to the standard output
     device.  This is most useful for seeing what the last change to a
     file was.

`-u'
     Use the unidiff format for the context diffs.  Remember that old
     versions of the `patch' program can't handle the unidiff format,
     so if you plan to post this patch to the net you should probably
     not use `-u'.

`-V VN'
     Expand keywords according to the rules current in RCS version VN
     (the expansion format changed with RCS version 5).  Note that this
     option is no longer accepted.  CVS will always expand keywords the
     way that RCS version 5 does.


File: cvs.info,  Node: rdiff examples,  Prev: rdiff options,  Up: rdiff

rdiff examples
--------------

   Suppose you receive mail from foo@example.net asking for an update
from release 1.2 to 1.4 of the tc compiler.  You have no such patches
on hand, but with CVS that can easily be fixed with a command such as
this:

     $ cvs rdiff -c -r FOO1_2 -r FOO1_4 tc | \
     $$ Mail -s 'The patches you asked for' foo@example.net

   Suppose you have made release 1.3, and forked a branch called
`R_1_3fix' for bug fixes.  `R_1_3_1' corresponds to release 1.3.1,
which was made some time ago.  Now, you want to see how much
development has been done on the branch.  This command can be used:

     $ cvs patch -s -r R_1_3_1 -r R_1_3fix module-name
     cvs rdiff: Diffing module-name
     File ChangeLog,v changed from revision 1.52.2.5 to 1.52.2.6
     File foo.c,v changed from revision 1.52.2.3 to 1.52.2.4
     File bar.h,v changed from revision 1.29.2.1 to 1.2


File: cvs.info,  Node: release,  Next: update,  Prev: rdiff,  Up: CVS commands

release--Indicate that a Module is no longer in use
===================================================

   * release [-d] directories...

   * Requires: Working directory.

   * Changes: Working directory, history log.

   This command is meant to safely cancel the effect of `cvs checkout'.
Since CVS doesn't lock files, it isn't strictly necessary to use this
command.  You can always simply delete your working directory, if you
like; but you risk losing changes you may have forgotten, and you leave
no trace in the CVS history file (*note history file::) that you've
abandoned your checkout.

   Use `cvs release' to avoid these problems.  This command checks that
no uncommitted changes are present; that you are executing it from
immediately above a CVS working directory; and that the repository
recorded for your files is the same as the repository defined in the
module database.

   If all these conditions are true, `cvs release' leaves a record of
its execution (attesting to your intentionally abandoning your
checkout) in the CVS history log.

* Menu:

* release options::             release options
* release output::              release output
* release examples::            release examples


File: cvs.info,  Node: release options,  Next: release output,  Up: release

release options
---------------

   The `release' command supports one command option:

`-d'
     Delete your working copy of the file if the release succeeds.  If
     this flag is not given your files will remain in your working
     directory.

     *WARNING:  The `release' command deletes all directories and files
     recursively.  This has the very serious side-effect that any
     directory that you have created inside your checked-out sources,
     and not added to the repository (using the `add' command; *note
     Adding files::) will be silently deleted--even if it is non-empty!*


File: cvs.info,  Node: release output,  Next: release examples,  Prev: release options,  Up: release

release output
--------------

   Before `release' releases your sources it will print a one-line
message for any file that is not up-to-date.

`U FILE'
`P FILE'
     There exists a newer revision of this file in the repository, and
     you have not modified your local copy of the file (`U' and `P'
     mean the same thing).

`A FILE'
     The file has been added to your private copy of the sources, but
     has not yet been committed to the repository.  If you delete your
     copy of the sources this file will be lost.

`R FILE'
     The file has been removed from your private copy of the sources,
     but has not yet been removed from the repository, since you have
     not yet committed the removal.  *Note commit::.

`M FILE'
     The file is modified in your working directory.  There might also
     be a newer revision inside the repository.

`? FILE'
     FILE is in your working directory, but does not correspond to
     anything in the source repository, and is not in the list of files
     for CVS to ignore (see the description of the `-I' option, and
     *note cvsignore::).  If you remove your working sources, this file
     will be lost.


File: cvs.info,  Node: release examples,  Prev: release output,  Up: release

release examples
----------------

   Release the `tc' directory, and delete your local working copy of
the files.

     $ cd ..         # You must stand immediately above the
                     # sources when you issue `cvs release'.
     $ cvs release -d tc
     You have [0] altered files in this repository.
     Are you sure you want to release (and delete) directory `tc': y
     $


File: cvs.info,  Node: update,  Prev: release,  Up: CVS commands

update--Bring work tree in sync with repository
===============================================

   * update [-ACdflPpR] [-I name] [-j rev [-j rev]] [-k kflag] [-r
     tag[:date] | -D date] [-W spec] files...

   * Requires: repository, working directory.

   * Changes: working directory.

   After you've run checkout to create your private copy of source from
the common repository, other developers will continue changing the
central source.  From time to time, when it is convenient in your
development process, you can use the `update' command from within your
working directory to reconcile your work with any revisions applied to
the source repository since your last checkout or update.  Without the
`-C' option, `update' will also merge any differences between the local
copy of files and their base revisions into any destination revisions
specified with `-r', `-D', or `-A'.

* Menu:

* update options::              update options
* update output::               update output


File: cvs.info,  Node: update options,  Next: update output,  Up: update

update options
--------------

   These standard options are available with `update' (*note Common
options::, for a complete description of them):

`-D date'
     Use the most recent revision no later than DATE.  This option is
     sticky, and implies `-P'.  See *Note Sticky tags::, for more
     information on sticky tags/dates.

`-f'
     Only useful with the `-D' or `-r' flags.  If no matching revision
     is found, retrieve the most recent revision (instead of ignoring
     the file).

`-k KFLAG'
     Process keywords according to KFLAG.  See *Note Keyword
     substitution::.  This option is sticky; future updates of this
     file in this working directory will use the same KFLAG.  The
     `status' command can be viewed to see the sticky options.  See
     *Note Invoking CVS::, for more information on the `status' command.

`-l'
     Local; run only in current working directory.  *Note Recursive
     behavior::.

`-P'
     Prune empty directories.  See *Note Moving directories::.

`-p'
     Pipe files to the standard output.

`-R'
     Update directories recursively (default).  *Note Recursive
     behavior::.

`-r TAG[:DATE]'
     Retrieve the revisions specified by TAG or, when DATE is specified
     and TAG is a branch tag, the version from the branch TAG as it
     existed on DATE.  This option is sticky, and implies `-P'.  See
     *Note Sticky tags::, for more information on sticky tags/dates.
     Also see *Note Common options::.

   These special options are also available with `update'.

`-A'
     Reset any sticky tags, dates, or `-k' options.  See *Note Sticky
     tags::, for more information on sticky tags/dates.

`-C'
     Overwrite locally modified files with clean copies from the
     repository (the modified file is saved in `.#FILE.REVISION',
     however).

`-d'
     Create any directories that exist in the repository if they're
     missing from the working directory.  Normally, `update' acts only
     on directories and files that were already enrolled in your
     working directory.

     This is useful for updating directories that were created in the
     repository since the initial checkout; but it has an unfortunate
     side effect.  If you deliberately avoided certain directories in
     the repository when you created your working directory (either
     through use of a module name or by listing explicitly the files
     and directories you wanted on the command line), then updating
     with `-d' will create those directories, which may not be what you
     want.

`-I NAME'
     Ignore files whose names match NAME (in your working directory)
     during the update.  You can specify `-I' more than once on the
     command line to specify several files to ignore.  Use `-I !' to
     avoid ignoring any files at all.  *Note cvsignore::, for other
     ways to make CVS ignore some files.

`-WSPEC'
     Specify file names that should be filtered during update.  You can
     use this option repeatedly.

     SPEC can be a file name pattern of the same type that you can
     specify in the `.cvswrappers' file. *Note Wrappers::.

`-jREVISION'
     With two `-j' options, merge changes from the revision specified
     with the first `-j' option to the revision specified with the
     second `j' option, into the working directory.

     With one `-j' option, merge changes from the ancestor revision to
     the revision specified with the `-j' option, into the working
     directory.  The ancestor revision is the common ancestor of the
     revision which the working directory is based on, and the revision
     specified in the `-j' option.

     Note that using a single `-j TAGNAME' option rather than `-j
     BRANCHNAME' to merge changes from a branch will often not remove
     files which were removed on the branch.  *Note Merging adds and
     removals::, for more.

     In addition, each `-j' option can contain an optional date
     specification which, when used with branches, can limit the chosen
     revision to one within a specific date.  An optional date is
     specified by adding a colon (:) to the tag:
     `-jSYMBOLIC_TAG:DATE_SPECIFIER'.

     *Note Branching and merging::.



File: cvs.info,  Node: update output,  Prev: update options,  Up: update

update output
-------------

   `update' and `checkout' keep you informed of their progress by
printing a line for each file, preceded by one character indicating the
status of the file:

`U FILE'
     The file was brought up to date with respect to the repository.
     This is done for any file that exists in the repository but not in
     your source, and for files that you haven't changed but are not
     the most recent versions available in the repository.

`P FILE'
     Like `U', but the CVS server sends a patch instead of an entire
     file.  This accomplishes the same thing as `U' using less
     bandwidth.

`A FILE'
     The file has been added to your private copy of the sources, and
     will be added to the source repository when you run `commit' on
     the file.  This is a reminder to you that the file needs to be
     committed.

`R FILE'
     The file has been removed from your private copy of the sources,
     and will be removed from the source repository when you run
     `commit' on the file.  This is a reminder to you that the file
     needs to be committed.

`M FILE'
     The file is modified in  your  working  directory.

     `M' can indicate one of two states for a file you're working on:
     either there were no modifications to the same file in the
     repository, so that your file remains as you last saw it; or there
     were modifications in the repository as well as in your copy, but
     they were merged successfully, without conflict, in your working
     directory.

     CVS will print some messages if it merges your work, and a backup
     copy of your working file (as it looked before you ran `update')
     will be made.  The exact name of that file is printed while
     `update' runs.

`C FILE'
     A conflict was detected while trying to merge your changes to FILE
     with changes from the source repository.  FILE (the copy in your
     working directory) is now the result of attempting to merge the
     two revisions; an unmodified copy of your file is also in your
     working directory, with the name `.#FILE.REVISION' where REVISION
     is the revision that your modified file started from.  Resolve the
     conflict as described in *Note Conflicts example::.  (Note that
     some systems automatically purge files that begin with `.#' if
     they have not been accessed for a few days.  If you intend to keep
     a copy of your original file, it is a very good idea to rename
     it.)  Under VMS, the file name starts with `__' rather than `.#'.

`? FILE'
     FILE is in your working directory, but does not correspond to
     anything in the source repository, and is not in the list of files
     for CVS to ignore (see the description of the `-I' option, and
     *note cvsignore::).


File: cvs.info,  Node: Invoking CVS,  Next: Administrative files,  Prev: CVS commands,  Up: Top

Quick reference to CVS commands
*******************************

   This appendix describes how to invoke CVS, with references to where
each command or feature is described in detail.  For other references
run the `cvs --help' command, or see *Note Index::.

   A CVS command looks like:

     cvs [ GLOBAL_OPTIONS ] COMMAND [ COMMAND_OPTIONS ] [ COMMAND_ARGS ]

   Global options:

`--allow-root=ROOTDIR'
     Specify legal CVSROOT directory (server only) (not in CVS 1.9 and
     older).  See *Note Password authentication server::.

`-a'
     Authenticate all communication (client only) (not in CVS 1.9 and
     older).  See *Note Global options::.

`-b'
     Specify RCS location (CVS 1.9 and older).  See *Note Global
     options::.

`-d ROOT'
     Specify the CVSROOT.  See *Note Repository::.

`-e EDITOR'
     Edit messages with EDITOR.  See *Note Committing your changes::.

`-f'
     Do not read the `~/.cvsrc' file.  See *Note Global options::.

`-H'
`--help'
     Print a help message.  See *Note Global options::.

`-n'
     Do not change any files.  See *Note Global options::.

`-Q'
     Be really quiet.  See *Note Global options::.

`-q'
     Be somewhat quiet.  See *Note Global options::.

`-r'
     Make new working files read-only.  See *Note Global options::.

`-s VARIABLE=VALUE'
     Set a user variable.  See *Note Variables::.

`-T TEMPDIR'
     Put temporary files in TEMPDIR.  See *Note Global options::.

`-t'
     Trace CVS execution.  See *Note Global options::.

`-v'

`--version'
     Display version and copyright information for CVS.

`-w'
     Make new working files read-write.  See *Note Global options::.

`-x'
     Encrypt all communication (client only).  See *Note Global
     options::.

`-z GZIP-LEVEL'
     Set the compression level (client only).  See *Note Global
     options::.

   Keyword expansion modes (*note Substitution modes::):

     -kkv  $Id: file1,v 1.1 1993/12/09 03:21:13 joe Exp $
     -kkvl $Id: file1,v 1.1 1993/12/09 03:21:13 joe Exp harry $
     -kk   $Id$
     -kv   file1,v 1.1 1993/12/09 03:21:13 joe Exp
     -ko   no expansion
     -kb   no expansion, file is binary

   Keywords (*note Keyword list::):

     $Author: joe $
     $Date: 1993/12/09 03:21:13 $
     $CVSHeader: files/file1,v 1.1 1993/12/09 03:21:13 joe Exp harry $
     $Header: /home/files/file1,v 1.1 1993/12/09 03:21:13 joe Exp harry $
     $Id: file1,v 1.1 1993/12/09 03:21:13 joe Exp harry $
     $Locker: harry $
     $Name: snapshot_1_14 $
     $RCSfile: file1,v $
     $Revision: 1.1 $
     $Source: /home/files/file1,v $
     $State: Exp $
     $Log: file1,v $
     Revision 1.1  1993/12/09 03:30:17  joe
     Initial revision

   Commands, command options, and command arguments:

`add [OPTIONS] [FILES...]'
     Add a new file/directory.  See *Note Adding files::.

    `-k KFLAG'
          Set keyword expansion.

    `-m MSG'
          Set file description.

`admin [OPTIONS] [FILES...]'
     Administration of history files in the repository.  See *Note
     admin::.

    `-b[REV]'
          Set default branch.  See *Note Reverting local changes::.

    `-cSTRING'
          Set comment leader.

    `-kSUBST'
          Set keyword substitution.  See *Note Keyword substitution::.

    `-l[REV]'
          Lock revision REV, or latest revision.

    `-mREV:MSG'
          Replace the log message of revision REV with MSG.

    `-oRANGE'
          Delete revisions from the repository.  See *Note admin
          options::.

    `-q'
          Run quietly; do not print diagnostics.

    `-sSTATE[:REV]'
          Set the state.

    `-t'
          Set file description from standard input.

    `-tFILE'
          Set file description from FILE.

    `-t-STRING'
          Set file description to STRING.

    `-u[REV]'
          Unlock revision REV, or latest revision.

`annotate [OPTIONS] [FILES...]'
     Show last revision where each line was modified.  See *Note
     annotate::.

    `-D DATE'
          Annotate the most recent revision no later than DATE.  See
          *Note Common options::.

    `-F'
          Force annotation of binary files.  (Without this option,
          binary files are skipped with a message.)

    `-f'
          Use head revision if tag/date not found.  See *Note Common
          options::.

    `-l'
          Local; run only in current working directory.  *Note
          Recursive behavior::.

    `-R'
          Operate recursively (default).  *Note Recursive behavior::.

    `-r TAG[:DATE]'
          Annotate revisions specified by TAG or, when DATE is specified
          and TAG is a branch tag, the version from the branch TAG as it
          existed on DATE.  See *Note Common options::.

`checkout [OPTIONS] MODULES...'
     Get a copy of the sources.  See *Note checkout::.

    `-A'
          Reset any sticky tags/date/options.  See *Note Sticky tags::
          and *Note Keyword substitution::.

    `-c'
          Output the module database.  See *Note checkout options::.

    `-D DATE'
          Check out revisions as of DATE (is sticky).  See *Note Common
          options::.

    `-d DIR'
          Check out into DIR.  See *Note checkout options::.

    `-f'
          Use head revision if tag/date not found.  See *Note Common
          options::.

    `-j TAG[:DATE]'
          Merge in the change specified by TAG, or when DATE is
          specified and TAG is a branch tag, the version from the
          branch TAG as it existed on DATE.  See *Note checkout
          options::.

    `-k KFLAG'
          Use KFLAG keyword expansion.  See *Note Substitution modes::.

    `-l'
          Local; run only in current working directory.  *Note
          Recursive behavior::.

    `-N'
          Don't "shorten" module paths if -d specified.  See *Note
          checkout options::.

    `-n'
          Do not run module program (if any).  See *Note checkout
          options::.

    `-P'
          Prune empty directories.  See *Note Moving directories::.

    `-p'
          Check out files to standard output (avoids stickiness).  See
          *Note checkout options::.

    `-R'
          Operate recursively (default).  *Note Recursive behavior::.

    `-r TAG[:DATE]'
          Checkout the revision already tagged with TAG or, when DATE is
          specified and TAG is a branch tag, the version from the
          branch TAG as it existed on DATE.  This .  See *Note Common
          options::.

    `-s'
          Like -c, but include module status.  See *Note checkout
          options::.

`commit [OPTIONS] [FILES...]'
     Check changes into the repository.  See *Note commit::.

    `-c'
          Check for valid edits before committing.  Requires a CVS
          client and server both version 1.12.10 or greater.

    `-F FILE'
          Read log message from FILE.  See *Note commit options::.

    `-f'
          Force the file to be committed; disables recursion.  See
          *Note commit options::.

    `-l'
          Local; run only in current working directory.  See *Note
          Recursive behavior::.

    `-m MSG'
          Use MSG as log message.  See *Note commit options::.

    `-n'
          Do not run module program (if any).  See *Note commit
          options::.

    `-R'
          Operate recursively (default).  *Note Recursive behavior::.

    `-r REV'
          Commit to REV.  See *Note commit options::.

`diff [OPTIONS] [FILES...]'
     Show differences between revisions.  See *Note diff::.  In
     addition to the options shown below, accepts a wide variety of
     options to control output style, for example `-c' for context
     diffs.

    `-D DATE1'
          Diff revision for date against working file.  See *Note diff
          options::.

    `-D DATE2'
          Diff REV1/DATE1 against DATE2.  See *Note diff options::.

    `-l'
          Local; run only in current working directory.  See *Note
          Recursive behavior::.

    `-N'
          Include diffs for added and removed files.  See *Note diff
          options::.

    `-R'
          Operate recursively (default).  *Note Recursive behavior::.

    `-r TAG1[:DATE1]'
          Diff the revisions specified by TAG1 or, when DATE1 is
          specified and TAG1 is a branch tag, the version from the
          branch TAG1 as it existed on DATE1, against the working file.
          See *Note diff options:: and *Note Common options::.

    `-r TAG2[:DATE2]'
          Diff the revisions specified by TAG2 or, when DATE2 is
          specified and TAG2 is a branch tag, the version from the
          branch TAG2 as it existed on DATE2, against REV1/DATE1.  See
          *Note diff options:: and *Note Common options::.

`edit [OPTIONS] [FILES...]'
     Get ready to edit a watched file.  See *Note Editing files::.

    `-a ACTIONS'
          Specify actions for temporary watch, where ACTIONS is `edit',
          `unedit', `commit', `all', or `none'.  See *Note Editing
          files::.

    `-c'
          Check edits: Edit fails if someone else is already editting
          the file.  Requires a CVS client and server both of version
          1.12.10 or greater.

    `-f'
          Force edit; ignore other edits.  Added in CVS 1.12.10.

    `-l'
          Local; run only in current working directory.  See *Note
          Recursive behavior::.

    `-R'
          Operate recursively (default).  *Note Recursive behavior::.

`editors [OPTIONS] [FILES...]'
     See who is editing a watched file.  See *Note Watch information::.

    `-l'
          Local; run only in current working directory.  See *Note
          Recursive behavior::.

    `-R'
          Operate recursively (default).  *Note Recursive behavior::.

`export [OPTIONS] MODULES...'
     Export files from CVS.  See *Note export::.

    `-D DATE'
          Check out revisions as of DATE.  See *Note Common options::.

    `-d DIR'
          Check out into DIR.  See *Note export options::.

    `-f'
          Use head revision if tag/date not found.  See *Note Common
          options::.

    `-k KFLAG'
          Use KFLAG keyword expansion.  See *Note Substitution modes::.

    `-l'
          Local; run only in current working directory.  *Note
          Recursive behavior::.

    `-N'
          Don't "shorten" module paths if -d specified.  See *Note
          export options::.

    `-n'
          Do not run module program (if any).  See *Note export
          options::.

    `-R'
          Operate recursively (default).  *Note Recursive behavior::.

    `-r TAG[:DATE]'
          Export the revisions specified by TAG or, when DATE is
          specified and TAG is a branch tag, the version from the
          branch TAG as it existed on DATE.  See *Note Common options::.

`history [OPTIONS] [FILES...]'
     Show repository access history.  See *Note history::.

    `-a'
          All users (default is self).  See *Note history options::.

    `-b STR'
          Back to record with STR in module/file/repos field.  See
          *Note history options::.

    `-c'
          Report on committed (modified) files.  See *Note history
          options::.

    `-D DATE'
          Since DATE.  See *Note history options::.

    `-e'
          Report on all record types.  See *Note history options::.

    `-l'
          Last modified (committed or modified report).  See *Note
          history options::.

    `-m MODULE'
          Report on MODULE (repeatable).  See *Note history options::.

    `-n MODULE'
          In MODULE.  See *Note history options::.

    `-o'
          Report on checked out modules.  See *Note history options::.

    `-p REPOSITORY'
          In REPOSITORY.  See *Note history options::.

    `-r REV'
          Since revision REV.  See *Note history options::.

    `-T'
          Produce report on all TAGs.  See *Note history options::.

    `-t TAG'
          Since tag record placed in history file (by anyone).  See
          *Note history options::.

    `-u USER'
          For user USER (repeatable).  See *Note history options::.

    `-w'
          Working directory must match.  See *Note history options::.

    `-x TYPES'
          Report on TYPES, one or more of `TOEFWUPCGMAR'.  See *Note
          history options::.

    `-z ZONE'
          Output for time zone ZONE.  See *Note history options::.

`import [OPTIONS] REPOSITORY VENDOR-TAG RELEASE-TAGS...'
     Import files into CVS, using vendor branches.  See *Note import::.

    `-b BRA'
          Import to vendor branch BRA.  See *Note Multiple vendor
          branches::.

    `-d'
          Use the file's modification time as the time of import.  See
          *Note import options::.

    `-k KFLAG'
          Set default keyword substitution mode.  See *Note import
          options::.

    `-m MSG'
          Use MSG for log message.  See *Note import options::.

    `-I IGN'
          More files to ignore (! to reset).  See *Note import
          options::.

    `-W SPEC'
          More wrappers.  See *Note import options::.

`init'
     Create a CVS repository if it doesn't exist.  See *Note Creating a
     repository::.

`kserver'
     Kerberos authenticated server.  See *Note Kerberos authenticated::.

`log [OPTIONS] [FILES...]'
     Print out history information for files.  See *Note log::.

    `-b'
          Only list revisions on the default branch.  See *Note log
          options::.

    `-d DATES'
          Specify dates (D1<D2 for range, D for latest before).  See
          *Note log options::.

    `-h'
          Only print header.  See *Note log options::.

    `-l'
          Local; run only in current working directory.  See *Note
          Recursive behavior::.

    `-N'
          Do not list tags.  See *Note log options::.

    `-R'
          Only print name of RCS file.  See *Note log options::.

    `-rREVS'
          Only list revisions REVS.  See *Note log options::.

    `-s STATES'
          Only list revisions with specified states.  See *Note log
          options::.

    `-t'
          Only print header and descriptive text.  See *Note log
          options::.

    `-wLOGINS'
          Only list revisions checked in by specified logins.  See
          *Note log options::.

`login'
     Prompt for password for authenticating server.  See *Note Password
     authentication client::.

`logout'
     Remove stored password for authenticating server.  See *Note
     Password authentication client::.

`pserver'
     Password authenticated server.  See *Note Password authentication
     server::.

`rannotate [OPTIONS] [MODULES...]'
     Show last revision where each line was modified.  See *Note
     annotate::.

    `-D DATE'
          Annotate the most recent revision no later than DATE.  See
          *Note Common options::.

    `-F'
          Force annotation of binary files.  (Without this option,
          binary files are skipped with a message.)

    `-f'
          Use head revision if tag/date not found.  See *Note Common
          options::.

    `-l'
          Local; run only in current working directory.  *Note
          Recursive behavior::.

    `-R'
          Operate recursively (default).  *Note Recursive behavior::.

    `-r TAG[:DATE]'
          Annotate the revision specified by TAG or, when DATE is
          specified and TAG is a branch tag, the version from the
          branch TAG as it existed on DATE.  See *Note Common options::.

`rdiff [OPTIONS] MODULES...'
     Show differences between releases.  See *Note rdiff::.

    `-c'
          Context diff output format (default).  See *Note rdiff
          options::.

    `-D DATE'
          Select revisions based on DATE.  See *Note Common options::.

    `-f'
          Use head revision if tag/date not found.  See *Note Common
          options::.

    `-l'
          Local; run only in current working directory.  See *Note
          Recursive behavior::.

    `-R'
          Operate recursively (default).  *Note Recursive behavior::.

    `-r TAG[:DATE]'
          Select the revisions specified by TAG or, when DATE is
          specified and TAG is a branch tag, the version from the
          branch TAG as it existed on DATE.  See *Note diff options::
          and *Note Common options::.

    `-s'
          Short patch - one liner per file.  See *Note rdiff options::.

    `-t'
          Top two diffs - last change made to the file.  See *Note diff
          options::.

    `-u'
          Unidiff output format.  See *Note rdiff options::.

    `-V VERS'
          Use RCS Version VERS for keyword expansion (obsolete).  See
          *Note rdiff options::.

`release [OPTIONS] DIRECTORY'
     Indicate that a directory is no longer in use.  See *Note
     release::.

    `-d'
          Delete the given directory.  See *Note release options::.

`remove [OPTIONS] [FILES...]'
     Remove an entry from the repository.  See *Note Removing files::.

    `-f'
          Delete the file before removing it.  See *Note Removing
          files::.

    `-l'
          Local; run only in current working directory.  See *Note
          Recursive behavior::.

    `-R'
          Operate recursively (default).  *Note Recursive behavior::.

`rlog [OPTIONS] [FILES...]'
     Print out history information for modules.  See *Note log::.

    `-b'
          Only list revisions on the default branch.  See *Note log
          options::.

    `-d DATES'
          Specify dates (D1<D2 for range, D for latest before).  See
          *Note log options::.

    `-h'
          Only print header.  See *Note log options::.

    `-l'
          Local; run only in current working directory.  See *Note
          Recursive behavior::.

    `-N'
          Do not list tags.  See *Note log options::.

    `-R'
          Only print name of RCS file.  See *Note log options::.

    `-rREVS'
          Only list revisions REVS.  See *Note log options::.

    `-s STATES'
          Only list revisions with specified states.  See *Note log
          options::.

    `-t'
          Only print header and descriptive text.  See *Note log
          options::.

    `-wLOGINS'
          Only list revisions checked in by specified logins.  See
          *Note log options::.

`rtag [OPTIONS] TAG MODULES...'
     Add a symbolic tag to a module.  See *Note Revisions:: and *Note
     Branching and merging::.

    `-a'
          Clear tag from removed files that would not otherwise be
          tagged.  See *Note Tagging add/remove::.

    `-b'
          Create a branch named TAG.  See *Note Branching and merging::.

    `-B'
          Used in conjunction with -F or -d, enables movement and
          deletion of branch tags.  Use with extreme caution.

    `-D DATE'
          Tag revisions as of DATE.  See *Note Tagging by date/tag::.

    `-d'
          Delete TAG.  See *Note Modifying tags::.

    `-F'
          Move TAG if it already exists.  See *Note Modifying tags::.

    `-f'
          Force a head revision match if tag/date not found.  See *Note
          Tagging by date/tag::.

    `-l'
          Local; run only in current working directory.  See *Note
          Recursive behavior::.

    `-n'
          No execution of tag program.  See *Note Common options::.

    `-R'
          Operate recursively (default).  *Note Recursive behavior::.

    `-r TAG[:DATE]'
          Tag the revision already tagged with TAG or, when DATE is
          specified and TAG is a branch tag, the version from the
          branch TAG as it existed on DATE.  See *Note Tagging by
          date/tag:: and *Note Common options::.

`server'
     Rsh server.  See *Note Connecting via rsh::.

`status [OPTIONS] FILES...'
     Display status information in a working directory.  See *Note File
     status::.

    `-l'
          Local; run only in current working directory.  See *Note
          Recursive behavior::.

    `-R'
          Operate recursively (default).  *Note Recursive behavior::.

    `-v'
          Include tag information for file.  See *Note Tags::.

`tag [OPTIONS] TAG [FILES...]'
     Add a symbolic tag to checked out version of files.  See *Note
     Revisions:: and *Note Branching and merging::.

    `-b'
          Create a branch named TAG.  See *Note Branching and merging::.

    `-c'
          Check that working files are unmodified.  See *Note Tagging
          the working directory::.

    `-D DATE'
          Tag revisions as of DATE.  See *Note Tagging by date/tag::.

    `-d'
          Delete TAG.  See *Note Modifying tags::.

    `-F'
          Move TAG if it already exists.  See *Note Modifying tags::.

    `-f'
          Force a head revision match if tag/date not found.  See *Note
          Tagging by date/tag::.

    `-l'
          Local; run only in current working directory.  See *Note
          Recursive behavior::.

    `-R'
          Operate recursively (default).  *Note Recursive behavior::.

    `-r TAG[:DATE]'
          Tag the revision already tagged with TAG, or when DATE is
          specified and TAG is a branch tag, the version from the
          branch TAG as it existed on DATE.  See *Note Tagging by
          date/tag:: and *Note Common options::.

`unedit [OPTIONS] [FILES...]'
     Undo an edit command.  See *Note Editing files::.

    `-l'
          Local; run only in current working directory.  See *Note
          Recursive behavior::.

    `-R'
          Operate recursively (default).  *Note Recursive behavior::.

`update [OPTIONS] [FILES...]'
     Bring work tree in sync with repository.  See *Note update::.

    `-A'
          Reset any sticky tags/date/options.  See *Note Sticky tags::
          and *Note Keyword substitution::.

    `-C'
          Overwrite locally modified files with clean copies from the
          repository (the modified file is saved in `.#FILE.REVISION',
          however).

    `-D DATE'
          Check out revisions as of DATE (is sticky).  See *Note Common
          options::.

    `-d'
          Create directories.  See *Note update options::.

    `-f'
          Use head revision if tag/date not found.  See *Note Common
          options::.

    `-I IGN'
          More files to ignore (! to reset).  See *Note import
          options::.

    `-j TAG[:DATE]'
          Merge in changes from revisions specified by TAG or, when
          DATE is specified and TAG is a branch tag, the version from
          the branch TAG as it existed on DATE.  See *Note update
          options::.

    `-k KFLAG'
          Use KFLAG keyword expansion.  See *Note Substitution modes::.

    `-l'
          Local; run only in current working directory.  *Note
          Recursive behavior::.

    `-P'
          Prune empty directories.  See *Note Moving directories::.

    `-p'
          Check out files to standard output (avoids stickiness).  See
          *Note update options::.

    `-R'
          Operate recursively (default).  *Note Recursive behavior::.

    `-r TAG[:DATE]'
          Checkout the revisions specified by TAG or, when DATE is
          specified and TAG is a branch tag, the version from the
          branch TAG as it existed on DATE.  See *Note Common options::.

    `-W SPEC'
          More wrappers.  See *Note import options::.

`version'
     Display the version of CVS being used.  If the repository is
     remote, display both the client and server versions.

`watch [on|off|add|remove] [OPTIONS] [FILES...]'
     on/off: turn on/off read-only checkouts of files.  See *Note
     Setting a watch::.

     add/remove: add or remove notification on actions.  See *Note
     Getting Notified::.

    `-a ACTIONS'
          Specify actions for temporary watch, where ACTIONS is `edit',
          `unedit', `commit', `all', or `none'.  See *Note Editing
          files::.

    `-l'
          Local; run only in current working directory.  See *Note
          Recursive behavior::.

    `-R'
          Operate recursively (default).  *Note Recursive behavior::.

`watchers [OPTIONS] [FILES...]'
     See who is watching a file.  See *Note Watch information::.

    `-l'
          Local; run only in current working directory.  See *Note
          Recursive behavior::.

    `-R'
          Operate recursively (default).  *Note Recursive behavior::.



File: cvs.info,  Node: Administrative files,  Next: Environment variables,  Prev: Invoking CVS,  Up: Top

Reference manual for Administrative files
*****************************************

   Inside the repository, in the directory `$CVSROOT/CVSROOT', there
are a number of supportive files for CVS.  You can use CVS in a limited
fashion without any of them, but if they are set up properly they can
help make life easier.  For a discussion of how to edit them, see *Note
Intro administrative files::.

   The most important of these files is the `modules' file, which
defines the modules inside the repository.

* Menu:

* modules::                     Defining modules
* Wrappers::                    Specify binary-ness based on file name
* Trigger Scripts::		Launch scripts in response to server events
* rcsinfo::                     Templates for the log messages
* cvsignore::                   Ignoring files via cvsignore
* checkoutlist::                Adding your own administrative files
* history file::                History information
* Variables::                   Various variables are expanded
* config::                      Miscellaneous CVS configuration


File: cvs.info,  Node: modules,  Next: Wrappers,  Up: Administrative files

The modules file
================

   The `modules' file records your definitions of names for collections
of source code.  CVS will use these definitions if you use CVS to
update the modules file (use normal commands like `add', `commit', etc).

   The `modules' file may contain blank lines and comments (lines
beginning with `#') as well as module definitions.  Long lines can be
continued on the next line by specifying a backslash (`\') as the last
character on the line.

   There are three basic types of modules: alias modules, regular
modules, and ampersand modules.  The difference between them is the way
that they map files in the repository to files in the working
directory.  In all of the following examples, the top-level repository
contains a directory called `first-dir', which contains two files,
`file1' and `file2', and a directory `sdir'.  `first-dir/sdir' contains
a file `sfile'.

* Menu:

* Alias modules::             The simplest kind of module
* Regular modules::
* Ampersand modules::
* Excluding directories::     Excluding directories from a module
* Module options::            Regular and ampersand modules can take options
* Module program options::    How the modules ``program options'' programs
                              are run.

